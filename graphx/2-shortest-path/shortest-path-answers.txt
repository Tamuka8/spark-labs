import org.apache.spark.graphx._
import org.apache.spark.graphx.util.GraphGenerators

val graph: Graph[Int, Double] =
    GraphGenerators.logNormalGraph(sc, numVertices = 10).mapEdges(e => e.attr.toDouble)

graph.vertices.collect.foreach { case (id) => println(s"VertexId: $id") }
graph.edges.collect.foreach { case (edge) => println(s"$edge") }

val sourceId: VertexId = 1

val initialGraph = graph.mapVertices((id, _) => if (id == sourceId) 0.0 else Double.PositiveInfinity)

initialGraph.vertices.collect.foreach { case (id) => println(s"VertexId: $id") }
initialGraph.edges.collect.foreach { case (edge) => println(s"$edge") }


val sssp = initialGraph.pregel(Double.PositiveInfinity)(
    (id, dist, newDist) => math.min(dist, newDist), // Vertex Program
        triplet => {  // Send Message
        if (triplet.srcAttr + triplet.attr < triplet.dstAttr) {
            Iterator((triplet.dstId, triplet.srcAttr + triplet.attr))
        } else {
            Iterator.empty
        }
    },
    (a,b) => math.min(a,b) // Merge Message
)
println(sssp.vertices.collect.mkString("\n"))
